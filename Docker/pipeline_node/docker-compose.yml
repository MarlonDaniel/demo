version: "3"

services:
  db:
    container_name: db
    hostname : db
    build: 
      context: ./mysql
    environment:                    
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
      MYSQL_USER: ${MYSQL_USER} 
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
            - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql
            - db_data:/var/lib/mysql
    ports:
      - "9003:3306"
    networks: 
      tnp_net:
  api:
    #container_name: api                    #Ne le utilise pas car il fera scaling
    #hostname : api                         #Ne le utilise pas car il fera scaling
    build: 
      context: ./node                         #que me construya utilizando dentro del contexto actual la carpeta node (hace build segun el Dockerfile que encuentre)
    ports:
    #  - "9001:3000"
      - "9001-9002:3000"                        #asigna un rango de puertos del servidor a los dockers (para escalar)
    depends_on: 
      - db                                  #attend a que la base de données se démarre
    #volumes:
    # - ./app:/usr/src                       #monta mi contexto de build en la carpeta src
    # - /usr/src/node_modules                 #como hay archivos que no deben modificarse, le especificas el nombre para que no los toque
    networks: 
      tnp_net:
    deploy:
      replicas: 2                             #levanta 2 instancias. hay que ejecutar el docker-compose up --compatibility
    #command: npx sequelize-cli db:migrate   #pour faire la charge de la base de donnes, mais ne marche pas car je doit le faire une soule fois pour node
  lb:
    container_name: lb
    hostname : lb
    build: 
      context: ./nginx                        #levanta el balanceador de carga
    ports:
      - "9000:80"
    networks: 
      tnp_net:
volumes:
  db_data:
networks: 
  tnp_net: